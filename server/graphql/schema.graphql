scalar Date
scalar Cursor

type Auth {
  token: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!

  "When paginating backwards, are there more items?"
  hasPrevPage: Boolean!
}

"""
An object with an ID
"""
interface Node {
  "ID of the object"
  id: ID!
}

"""
A user is an individual's roomi account that owns
lists, can have roommates, and can make new content.
"""
type User implements Node {
  id: ID!
  username: String!
  password: String!
  email: String!
  accountCreated: Date!
  lists: [List]
}

"""
An edge in a connection.
"""
type ListEdge {
  "A cursor for use in pagination."
  cursor: String!

  "The item at the end of the edge."
  node: List
}

"""
A list of lists owned by a user
"""
type ListConnection {
  "A list of edges."
  edges: [ListEdge]

  "Information to aid in pagination."
  pageInfo: PageInfo

  "Identifies the total count of items in the connection."
  totalCount: Int
}

input ListInput {
  name: String
  private: Boolean
  items: [ListItemInput]
}

type List implements Node {
  id: ID!
  createdAt: Date
  items: [ListItem]
  name: String
  private: Boolean
}

type Reminder {
  date: Date
  name: String
}

input ListItemInput {
  content: String!
  priority: String
  starred: Boolean
  checked: Boolean = false
  completedDate: Date
  checkedDate: Date
}

type ListItem implements Node {
  id: ID!
  priority: String
  starred: Boolean
  checked: Boolean
  content: String
  completedDate: Date
  createdAt: Date
  checkedDate: Date
  reminder: [Reminder]
}

type Query {
  viwer: User
  node(id: ID!): Node
  user(username: String!, id: ID): User
  users: [User]
  getList(id: ID!): List

  lists(first: Int, before: String, last: Int, after: String): ListConnection!
}

type Mutation {
  signUp(username: String!, password: String!): Auth

  signIn(username: String!, password: String!): Auth

  updateUser(userId: ID!): User!

  deleteUser(userId: ID!): User!

  createNewList(input: ListInput): List!
}

schema {
  query: Query
  mutation: Mutation
}
